{
	"info": {
		"_postman_id": "a2a43ce5-32e7-4c13-8f9d-09a126c4d18e",
		"name": "API_TESTING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "008",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d436c7e-46a2-4622-841e-9fc0457c26dd",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"var schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"],",
							"    \"property\": {",
							"        \"name\": {\"type\": \"string\"},",
							"        \"homeworld\": {\"type\": \"string\"},",
							"        \"films\": {",
							"            \"type\": \"array\",",
							"            \"items\": {\"type\": \"strng\"}",
							"            },",
							"        \"species\": {",
							"            \"type\": \"array\",",
							"            \"items\": {\"type\": \"strng\"}",
							"            },",
							"        \"vehicles\": {",
							"            \"type\": \"array\",",
							"            \"items\": {\"type\": \"strng\"}",
							"            },",
							"        \"starships\": {",
							"            \"type\": \"array\",",
							"            \"items\": {\"type\": \"strng\"}",
							"            },",
							"    }",
							"};",
							"pm.test('Body is correst', function(){",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "007",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "786d0995-289b-47e9-93c8-b873f42f7240",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"",
							"var schema = {",
							"    // specify the type of object",
							"    \"type\": \"object\",",
							"    // specify requires properties",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],",
							"    // describe the properties",
							"    \"properties\": {",
							"        \"people\": {\"type\": \"string\"},",
							"        \"planets\": {\"type\": \"string\"},",
							"        \"films\": {\"type\": \"string\"},",
							"        \"species\": {\"type\": \"string\"},",
							"        \"vehicles\": {\"type\": \"string\"},",
							"        \"starships\": {\"type\": \"string\"},",
							"    }",
							"};",
							"",
							"pm.test('Body is correct', function() {",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
						"type": "text"
					}
				],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "01",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89444f68-5388-435e-b103-e5c6459d53e1",
						"exec": [
							"//1. Correct responce format JSON",
							"pm.test(\"Correct responce format JSON\", function() {",
							"    pm.response.to.have.jsonBody()",
							"});",
							"",
							"//2. We have all the declared fields in the response",
							"pm.test(\"Chek that we have all declared fields\", function() {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"people\");",
							"    pm.expect(jsonData).to.have.property(\"planets\");",
							"    pm.expect(jsonData).to.have.property(\"films\");",
							"    pm.expect(jsonData).to.have.property(\"species\");",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");",
							"    pm.expect(jsonData).to.have.property(\"starships\");",
							"});",
							"",
							"//3. Field value isn't NULL",
							"pm.test(\"Check if value isn't NULL\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(null);",
							"    pm.expect(jsonData.planets).not.equal(null);",
							"    pm.expect(jsonData.films).not.equal(null);",
							"    pm.expect(jsonData.species).not.equal(null);",
							"    pm.expect(jsonData.vehicles).not.equal(null);",
							"    pm.expect(jsonData.starships).not.equal(null);",
							"});",
							"",
							"//4. Check ifvalue isn't empty",
							"pm.test(\"Check ifvalue isn't empty\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(\"\");",
							"    pm.expect(jsonData.planets).not.equal(\"\");",
							"    pm.expect(jsonData.films).not.equal(\"\");",
							"    pm.expect(jsonData.species).not.equal(\"\");",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");",
							"    pm.expect(jsonData.starships).not.equal(\"\");",
							"});",
							"",
							"//5. Check if field corresponds to a specific value",
							"pm.test(\"Check if field corresponds to a specific value\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.co/api/people/\");",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.co/api/planets/\");",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.co/api/films/\");",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.co/api/species/\");",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.co/api/vehicles/\");",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.co/api/starships/\");",
							"});",
							"",
							"//6. Status code is 200",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//7. Status message is OK",
							"pm.test(\"Status message is OK\", function() {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"//8. Response time is less than 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"//9. There is a specific header in the response",
							"pm.test(\"There is a specific header in the response\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"//10. The response has a specific header with a specific value",
							"pm.test(\"The response has a specific header with a specific value\", function() {",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"//11. Cookie exists",
							"pm.test(\"Cookie exists\", function(){",
							"    pm.cookies.has(\"__cfduid\")",
							"});",
							"",
							"//12. Cookie has value",
							"pm.test(\"Cookie has value\", function(){",
							"    try{",
							"        var MY_COOKIE = pm.cookies.get(\"__cfduid\");",
							"        console.log(MY_COOKIE);",
							"    } catch(e) {",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\" + e)",
							"    }",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}